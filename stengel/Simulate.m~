%	FLIGHT --  6-DOF Trim, Linear Model, and Flight Path Simulation%	January 8, 2009  %	===============================================================%	Copyright 2009 by ROBERT F. STENGEL.  All rights reserved.	clear	global  SMI du flightsys%	This is the SCRIPT FILE.  It contains the Main Program, which:%		Defines initial conditions%		Contains aerodynamic data tables (if required)%		Calculates longitudinal trim condition%		Calculates stability-and-control derivatives%		Simulates flight path using nonlinear equations of motion		%	Functions used by FLIGHT:%		AeroModel.m		Aerodynamic coefficients of the aircraft, thrust model,%						and geometric and inertial properties%       DataTable.m     Tables for AeroModelAlpha.m%		Atmos.m			Air density, sound speed%		DCM.m			Direction-cosine matrix%		EoM.m			Equations of motion for integration%		LinModel.m		Equations of motion for linear model definition%		TrimCost.m		Cost function for trim solution%		WindField.m		Wind velocity components%	DEFINITION OF THE STATE VECTOR%		x(1)    = 		Body-axis x inertial velocity, ub, m/s%		x(2)    =		Body-axis y inertial velocity, vb, m/s%		x(3)    =		Body-axis z inertial velocity, wb, m/s%		x(4)    =		North position of center of mass WRT Earth, xe, m%		x(5)    =		East position of center of mass WRT Earth, ye, m%		x(6)    =		Negative of c.m. altitude WRT Earth, ze = -h, m%		x(7)    =		Body-axis roll rate, pr, rad/s%		x(8)    =		Body-axis pitch rate, qr, rad/s%		x(9)    =		Body-axis yaw rate, rr,rad/s%		x(10)   =		Roll angle of body WRT Earth, phir, rad%		x(11)   =		Pitch angle of body WRT Earth, thetar, rad%		x(12)   =		Yaw angle of body WRT Earth, psir, rad	%	DEFINITION OF THE CONTROL VECTOR%		u(1)    = 		Elevator, dEr, rad%		u(2)    = 		Aileron, dAr, rad%		u(3)    = 		Rudder, dRr, rad%		u(4)    = 		Throttle, dT, %%		u(5)    =		Asymmetric Spoiler, dASr, rad%		u(6)    =		Flap, dFr, rad%		u(7)    =		Stabilator, dSr, rad%	BEGINNING of MAIN PROGRAM%	=========================    '** FLIGHT **'    date					%	FLIGHT Flags (1 = ON, 0 = OFF)    	LINEAR  = 	1;		% Linear model flag (= 1 to calculate and store F and G)	dF      = 	0;		% Flap setting, deg	%	Altitude (ft), Indicated Airspeed (kt), Dynamic Pressure (N/m^2), and True Airspeed (m/s) for Trim Condition%   to be chosen by the User	hft         =   10000                       % Altitude above Sea Level, ft	h           =   hft * 0.3048                % Altitude above Sea Level, m        VKIAS       =   250                         % Indicated Airspeed, kt    VmsIAS      =   VKIAS * 0.5154              % Indicated Airspeed, m/s        [airDens,airPres,temp,soundSpeed] = Atmos(h)        qBarFixed   =   0.5*1.225*VmsIAS^2          % Dynamic Pressure at sea level, N/m^2        V           =   sqrt(2*qBarFixed/airDens)	% True Air Speed, TAS, m/s	(relative to air mass)%	Alphabetical List of Initial Conditions	alpha   =	0.0719*57.29578;    % Angle of attack, deg	(relative to air mass)	beta    =	0;                  % Sideslip angle, deg	(relative to air mass)	dA      =	0;                  % Aileron angle, deg	dAS     =	0;                  % Asymmetric spoiler angle, deg	dE      =	0;                  % Elevator angle, deg	dR      =	0;                  % Rudder angle, deg	dS      = 	-0.0342*57.29578;	% Stabilator setting, deg	dT      = 	0.1777;             % Throttle setting, % / 100	hdot    =	0;                  % Altitude rate, m/s [Inertial vertical flight path angle = 0 if hdot = 0]	p       =	0;                  % Body-axis roll rate, deg/s	phi     =	0;                  % Body roll angle wrt earth, deg	psi     =	0;                  % Body yaw angle wrt earth, deg	q       =	0;                  % Body-axis pitch rate, deg/sec	r       =	0;                  % Body-axis yaw rate, deg/s	SMI     =	0;                  % Static margin increment due to                                     % center-of-mass variation from reference, %/100	tf      =	40;                 % Final time, sec	ti      = 	0;                  % Initial time, sec	theta   =	alpha;              % Body pitch angle wrt earth, deg [theta = alpha if hdot = 0]	xe      =	0;                  % Initial longitudinal position, m	ye      = 	0;                  % Initial lateral position, m	ze      = 	-h;                 % Initial vertical position, m [h is positive up, z is positive down]            flightsys.alpha = alpha; flightsys.beta = beta;%	Initial Conditions Depending on Prior Initial Conditions	gamma	=	57.29578 * atan(hdot / sqrt(V^2 - hdot^2))						% Inertial Vertical Flight Path Angle, deg	qbar	= 	0.5 * airDens * V^2							% Dynamic Pressure, N/m^2	IAS		=	sqrt(2 * qbar / 1.225)						% Indicated Air Speed, m/s	Mach	= 	V / soundSpeed							% Mach Number                            flightsys.vkias=IAS/0.5154;	du = zeros(7,1);										%	State Vector and Control Initialization	phir	=	phi * .01745329;	thetar	=	theta * .01745329;	psir	=	psi * .01745329;	windb	=	WindField(-ze,phir,thetar,psir);	alphar	=	alpha * .01745329;	betar	=	beta * .01745329;	x	=	[V * cos(alphar) * cos(betar) - windb(1)			V * sin(betar) - windb(2)			V * sin(alphar) * cos(betar) - windb(3)			xe			ye			ze			p * .01745329			q * .01745329			r * .01745329			phir			thetar			psir];	u	=	[dE * .01745329			dA * .01745329			dR * .01745329			dT			dAS * .01745329			dF * .01745329			dS * .01745329];                state = [x ;u+du]';       flightsys.state = state;       flightsys.count = 0; %% A counter for number of iterations of flight.                  DynTimer = timer('TimerFcn',@StepIt, 'Period', 0.01,'ExecutionMode','fixedRate');        %GrphTimer = timer('TimerFcn',@Graphics, 'Period', 0.05,'ExecutionMode','fixedSpacing');%start(GrphTimer);pause(3);start(DynTimer);%	Flight Path Calculation %xxx = xs;j=1;%for i = ti:tf,     %       [ttt,xxx] =   ode15s('Dynamics',[0 1],xxx(end,:)); %       xxx1(j,:) = xxx(end,:);j=j+1;%end%	if SIMUL >= 1%		tspan	=	[ti tf];%		xo		=	x + delx%		u		=	u + delu;%		[t,x]	=	ode15s('EoM',tspan,xo); %       [tt,xx] =   ode15s('Dynamics',tspan,xs); %       plot3(x(:,4),x(:,5),-x(:,6),'g'); %       plot3(xx(:,4),xx(:,5),-xx(:,6)+100,'r.');hold off;%		kHis	=	length(t)    'End of FLIGHT Simulation'%	end